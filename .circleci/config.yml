version: 2.1

executors:
    dotnet-executor:
        docker:
            - image: mcr.microsoft.com/dotnet/core/sdk:3.0
              environment:
                DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                DOTNET_CLI_TELEMETRY_OPTOUT: 1

    dotnet-mono-executor:
        docker:
            - image: gfoidl/dotnet-mono:3.0-2.2-2.1-sdk-5.18.1.0
              environment:
                DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                DOTNET_CLI_TELEMETRY_OPTOUT: 1

commands:
    set_env:
        description: "Sets the build environment variables"
        steps:
            - run:
                name: "set build environment"
                command: |
                    if [[ -z "$CI_BUILD_NUMBER" ]]; then
                        echo 'export CI_BUILD_NUMBER="$CIRCLE_BUILD_NUM"' >> "$BASH_ENV"
                        echo 'export BRANCH_NAME="$CIRCLE_BRANCH"' >> "$BASH_ENV"
                        echo 'export TAG_NAME="$CIRCLE_TAG"' >> "$BASH_ENV"
                    fi

                    # Exporting / sourcing the path before installing the tool prevents the message about the PATH
                    echo 'export PATH="$PATH:/root/.dotnet/tools"' >> "$BASH_ENV"

    # Is as command, so that environment variables can be set
    build_test:
        description: "Builds and tests"
        parameters:
            debug-build:
                type: boolean
                default: false
        steps:
            - checkout
            - set_env
            - run:
                name: init
                command: |
                    chmod ugo+x ./build.sh
                    dotnet tool install -g trx2junit
                    dotnet tool install -g coverlet.console
            - run:
                name: build
                command: ./build.sh build
            - run:
                name: test
                command: ./build.sh test
            - run:
                name: test results
                command: |
                    if [[ -d "tests/TestResults" ]]; then
                        find tests/TestResults -name "*.trx" | xargs -n1 trx2junit
                        #rm tests/TestResults/*.trx
                    fi
                when: always
            - run:
                name: code coverage
                command: |
                    if [[ -z "$CODECOV_TOKEN" ]]; then
                        echo "codecov token not set -- skipping code coverage"
                    else
                        ./build.sh coverage
                    fi
            - unless:
                condition: << parameters.debug-build >>
                steps:
                    - run:
                        name: pack
                        command: ./build.sh pack
                    - persist_to_workspace:
                        root: .
                        paths:
                            - build.sh
                            - NuGet-Packed
            - store_test_results:
                path: tests/TestResults
            - store_artifacts:
                path: tests/TestResults
                destination: TestResults

    bench:
        description: "Benchmarks"
        steps:
            - checkout
            - run:
                name: benchmarks for Sample
                command: |
                    cd perf/$NAME.Benchmarks
                    dotnet run -c Release -f netcoreapp2.1 SampleAll
            - store_artifacts:
                path: perf/gfoidl.Stochastics.Benchmarks/BenchmarkDotNet.Artifacts/results/gfoidl.Stochastics.Benchmarks.SampleAll-report-github.md
                destination: benchmark.md
            - store_artifacts:
                path: perf/gfoidl.Stochastics.Benchmarks/BenchmarkDotNet.Artifacts/results/gfoidl.Stochastics.Benchmarks.SampleAll-report.csv
                destination: benchmark.csv

jobs:
    release_build_test:
        executor: dotnet-mono-executor
        steps:
            - build_test

    debug_build_test:
        executor: dotnet-mono-executor
        environment:
            BUILD_CONFIG: Debug
        steps:
            - build_test:
                debug-build: true

    benchmarks:
        executor: dotnet-executor
        steps:
            - bench

    deploy:
        executor: dotnet-executor
        parameters:
            target:
                type: string
        steps:
            - set_env
            - attach_workspace:
                at: .
            - run:
                name: deploy to << parameters.target >>
                command: |
                    chmod ugo+x ./build.sh
                    ./build.sh deploy << parameters.target >>

workflows:
    version: 2
    build_test_deploy:
        jobs:
            - release_build_test:
                filters:
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/

            - debug_build_test:
                filters:
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/

            - benchmarks:
                requires:
                    - release_build_test
                    - debug_build_test
                filters:
                    branches:
                        #only: master
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/

            - deploy:
                name: deploy-nuget
                target: nuget       # parameter
                requires:
                    - release_build_test
                    - debug_build_test
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9]$/
                context: org-global

            - deploy:
                name: deploy-myget
                target: myget       # parameter
                requires:
                    - release_build_test
                    - debug_build_test
                filters:
                    branches:
                        #only: master
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/
                context: org-global
